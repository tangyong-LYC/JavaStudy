package com.yongtang.methods;
//======================================================================================================================
//Java方法是语句的集合，它们在一起执行一个功能。
//       方法是解决一类问题的步骤的有序组合
//       方法包含于类或对象中
//       方法在程序中被创建，在其他地方被引用
//设计方法的原则：方法的本意是功能块，就是实现某个功能的语句块的集合。
//             我们设计方法的时候，最好保持方法的原子性，就是一个方法只完成一个功能，这样有利于我们后期的扩展。
//======================================================================================================================
/**
 * @author yongtang
 */
public class Demo1 {
    public static void main(String[] args) {
        System.out.println(add(1,3));
        test();
    }
//==================================================================================================================
//jav的方法类似于其他语言的函数，是一段用来完成特定功能的代码片段，一般情况下，定义一个方法包含以下语法：
//方法包含一个方法头和一个方法体。下面是一个方法的所有部分：
//    修饰符：修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。
//    返回值类型：方法可能会返回值。returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType是关键字void.
//    方法名：是方法的实际名称。方法名和参数表共同构成方法签名。
//    参数类型：参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。
//            形式参数：在方法被调用时用于接收外界输入的数据。
//            实参：调用方法时实际传给方法的数据
//    方法体：方法体包含具体的语句，定义该方法的功能。
//==================================================================================================================
    //加法
    public static int add(int a,int b){
        return a+b;
    }
    public static void test(){
        int a = 0;
        int b = 0;
        for (int c = 0;c<=100;c++){
            if(c%2!=0){
                a = a + c;
            }else {
                b = b + c;
            }
        }
        System.out.println(a+"\n"+b);
    }
}